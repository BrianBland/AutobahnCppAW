###############################################################################
#
# Copyright (c) Tavendo GmbH
#
# Boost Software License - Version 1.0 - August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
###############################################################################

import os, sys, commands


# This is our default build enviroment
#
env = Environment()


# Toolchain configuration
#
if 'CXX' in os.environ:
    env["CXX"] = os.environ['CXX']

if env['CXX'].startswith('g++'):

    GCC_VERSION = commands.getoutput(env['CXX'] + ' -dumpversion')
    if GCC_VERSION < "4.3.0":
        raise SCons.Errors.UserError, "GCC version {} detected with no or insufficient C++ 11 support detected".format(GCC_VERSION)

    env.Append(CXXFLAGS = ['-std=c++11',
                           '-O2',
                           '-Wall',
                           '-pedantic',
                           '-Wno-deprecated-declarations',
                           '-Wno-unused-local-typedefs',
                           '-Wl,--no-as-needed',
                           '-pthread'])

    env.Append(LINKFLAGS = ['-pthread'])

    print("Using GNU toolchain")

elif env['CXX'].startswith('clang++'):

    env.Append(CXXFLAGS = ['-std=c++11',
                           '-stdlib=libc++',
                           '-O2',
                           '-Wall',
                           '-pedantic',
                           '-Wno-unused-value',
                           '-Wno-deprecated',
                           '-pthread'])

    env.Append(LINKFLAGS = ['-stdlib=libc++', '-pthread'])

    print("Using clang toolchain")

else:
    raise SCons.Errors.UserError, "Don't know how to configure build environment for toolchain {}".format(env['CXX'])


# Boost
#
if os.environ.has_key('BOOST_ROOT'):
    env.Append(CPPPATH = [os.environ['BOOST_ROOT']])
    env.Append(LIBPATH = [os.path.join(os.environ['BOOST_ROOT'], 'stage', 'lib')])
elif os.environ.has_key('BOOST_INCLUDES') and os.environ.has_key('BOOST_LIBS'):
    env.Append(CPPPATH = [os.environ['BOOST_INCLUDES']])
    env.Append(LIBPATH = [os.environ['BOOST_LIBS']])
else:
    raise SCons.Errors.UserError, "Neither BOOST_ROOT, nor BOOST_INCLUDES + BOOST_LIBS was set!"


# MsgPack
#
if os.environ.has_key('MSGPACK_ROOT'):
    env.Append(CPPPATH = [os.path.join(os.environ['MSGPACK_ROOT'], 'include')])
    env.Append(LIBPATH = [os.path.join(os.environ['MSGPACK_ROOT'], 'lib')])
elif os.environ.has_key('MSGPACK_INCLUDES') and os.environ.has_key('MSGPACK_LIBS'):
    env.Append(CPPPATH = [os.environ['MSGPACK_INCLUDES']])
    env.Append(LIBPATH = [os.environ['MSGPACK_LIBS']])
else:
    raise SCons.Errors.UserError, "Neither MSGPACK_ROOT, nor MSGPACK_INCLUDES + MSGPACK_LIBS was set!"


if os.environ.has_key('OPENSSL_ROOT'):
    env.Append(CPPPATH = [os.path.join(os.environ['OPENSSL_ROOT'], 'include')])
    env.Append(LIBPATH = [os.path.join(os.environ['OPENSSL_ROOT'], 'lib')])
elif os.environ.has_key('OPENSSL_INCLUDES') and os.environ.has_key('OPENSSL_LIBS'):
    env.Append(CPPPATH = [os.environ['OPENSSL_INCLUDES']])
    env.Append(LIBPATH = [os.environ['OPENSSL_LIBS']])
#not raising error, since this it may build fine and OpenSSL fix is for Mac only
    
if os.environ.has_key('WEBSOCKETPP_ROOT'):
    env.Append(CPPPATH = [os.path.join(os.environ['WEBSOCKETPP_ROOT'])])
#not raising error, since this it may build when websocket is not used
    
# Autobahn (is included as in `#include <autobahn/autobahn.hpp`)
#
env.Append(CPPPATH = ['#'])


# Examples
#
Export('env')
examples = SConscript('examples/SConscript', variant_dir = 'build/examples', duplicate = 0)
