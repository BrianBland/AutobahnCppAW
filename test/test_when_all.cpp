///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) Tavendo GmbH
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////

#include <iostream>

#define BOOST_THREAD_PROVIDES_FUTURE
#define BOOST_THREAD_PROVIDES_FUTURE_CONTINUATION
#define BOOST_THREAD_PROVIDES_FUTURE_WHEN_ALL_WHEN_ANY
#include <boost/thread/future.hpp>


using namespace boost;
using namespace std;


int main() {
   future<int> f1 = async([]() { return 1; });
   //future<int> f2 = async([]() { return 2; });
   //future<int> f3 = async([]() { return 3; });

   auto f1_ = f1.then([](decltype(f1) res) {
      cout << "f1 done" << endl;
      int ires = res.get();
      auto fi = async([=]() { return 11 + ires; });
      //return fi.get();
      //return 11 + ires;
      return async([=]() { return 11 + ires; });
   });

   int fres = f1_.get().get();
//   int fres = f1_.unwrap().get();
//   int fres = f1_.get();
   cout << "fres done" << fres << endl;

/*
   auto f1_d = f1_.then([](decltype(f1_)) {
      std::cout << "f1_ done" << std::endl;
   });

   f1_d.get();

   auto f2_ = f2.then([](decltype(f2) res) {
      std::cout << "f2 done" << std::endl;
   });

   auto f3_ = f3.then([](decltype(f3) res) {
      std::cout << "f3 done" << std::endl;
   });

   auto f12 = when_all(std::move(f1), std::move(f2));

   auto f12d = f12.then([](decltype(f12)) {
      std::cout << "f12 done" << std::endl;
   });

   auto f23 = when_all(std::move(f2), std::move(f3));

   auto f23d = f23.then([](decltype(f23)) {
      std::cout << "f23 done" << std::endl;
   });

   auto f123 = when_all(std::move(f12d), std::move(f23d));

   auto fall = f123.then([](decltype(f123)) {
      std::cout << "all done" << std::endl;
   });

   fall.get();
*/
}
